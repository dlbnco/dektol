---
import type { ImageFieldImage } from '@prismicio/types'
import getBase64FromImageUrl from '~/utils/getBase64FromImageUrl'

export type Props = ImageFieldImage
const props = Astro.props as Props
const { url, dimensions } = props
const ratio = dimensions ? dimensions.width / dimensions.height : 1

const getFormat = (ratio: number) => {
  if (ratio === 1) return 'square'
  if (ratio > 1) return 'landscape'
  return 'portrait'
}

const src = `${url}&w=1600&q=50`

const sizes = ` 
  (min-width: 720px) calc(calc(100vh - 128px) * ${ratio.toFixed(2)}),
  100vw
`

const srcset = `
  ${url}&w=400 400w,
  ${url}&w=600 600w,
  ${url}&w=800&q=70 800w,
  ${url}&w=1000&q=70 1000w,
  ${url}&w=1200&q=60 1200w,
  ${url}&w=1600&q=50 1600w,
  ${url}&w=2000&q=40 2000w,
  ${url}&w=2400&q=40 2400w,
  ${url}&w=3200&q=30 3200w,
`

const filename = decodeURIComponent(new URL(props.url || '').pathname)
  ?.split('_')
  ?.splice(1)
  ?.join(',')
  ?.replaceAll('+', ' ')
  ?.replaceAll(',,,,', '____')
  ?.replace(/\.jpe?g$/i, '')

const getPhotoMetaArray = (x: string) =>
  x
    .split(', ')
    ?.map(x => x.trim())
    ?.filter(Boolean) || []

const hasValidPhotoMeta = getPhotoMetaArray(filename).length >= 7

const photoMeta = getPhotoMetaArray(filename)

const alt = props.alt || hasValidPhotoMeta ? photoMeta.join('\n') : ''

const blurHash = await getBase64FromImageUrl(`${url}&h=16`)
---

<div class='image-wrapper' data-format={getFormat(ratio)}>
  <div class='image-wrapper-inner' data-map='item'>
    {blurHash && <img class='image-blurhash' src={blurHash} aria-hidden='true' />}
    <img
      class='image-main'
      src={src}
      sizes={sizes}
      srcset={srcset}
      loading='lazy'
      data-loaded='false'
      alt={alt}
      {...dimensions}
      onload='handleImageLoad(this)'
    />
  </div>
</div>

<style is:global>
  .image-wrapper {
    position: relative;
    display: block;
    pointer-events: auto;
  }

  .image-blurhash {
    position: absolute;
    left: 0;
    width: 100%;
    top: 0;
    height: 100%;
    object-fit: cover;
    image-rendering: pixelated;
    max-width: none;
    transition: 0s display 0.75s;
    user-select: none;
  }

  .image-main {
    position: relative;
    transition: 0.5s opacity;
    height: auto;
    width: 100%;
    user-select: none;
  }

  .image-main img {
    pointer-events: auto;
  }

  html[data-js='true'] .image-main[data-loaded='false'] {
    opacity: 0;
  }

  html[data-js='true'] .image-main[data-loaded='true'] {
    opacity: 1;
  }

  html[data-js='true'] .image-main[data-loaded='true'] ~ .image-blurhash {
    display: none;
  }
</style>
