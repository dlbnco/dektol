---
import type { PageDocument } from '~/prismic.generated'
import Image from '~/components/Image.astro'
export type Props = PageDocument
const { uid, data } = Astro.props as Props
const { background, foreground } = data

const images = data.body
  .flatMap(({ items }) => items)
  .map(({ image }) => image)
  .filter(({ url }) => url)

---
<a class='home-item' href={`/${uid}`}>
  <div class='home-item-images'>
    {images.map(image => <Image {...image} />)}
  </div>
  <div class='home-item-title'>{data.title || uid} <slot/></div>
</a>
<script>
  const HOME_ITEM_INTERVAL = 250

  const focusIfHTML = (target: EventTarget | null) => {
    if (target instanceof HTMLElement) target.scrollIntoView(false)
  }

  [...document.querySelectorAll('.home-item')].forEach(item => {
    item.addEventListener('focus', e => focusIfHTML(e.target))

    let currentIndex: number | null = null
    let intervalHandle: number | null = null

    const onMouseEnter = ({ target }: Event) => {
      if(!(target instanceof HTMLElement)) return
      const images = [...target.querySelectorAll('.image-wrapper')]
      const totalImages = images.length
      if (currentIndex === null) {
        currentIndex = 0
        images[currentIndex].setAttribute('data-active', 'true')
      }
  
      intervalHandle = window.setInterval(() => {
        const startIndex = images.findIndex(x => x.getAttribute('data-active'))
        images.forEach(x => x.removeAttribute('data-active'))
        const nextIndex = startIndex + 1 >= totalImages ? 0 : startIndex + 1
        images[nextIndex].setAttribute('data-active', 'true')
      }, HOME_ITEM_INTERVAL)
    }

    const onMouseLeave = () => window.clearInterval(intervalHandle || undefined)

    item.addEventListener('mouseenter', onMouseEnter)
    item.addEventListener('focus', onMouseEnter)
    item.addEventListener('mouseleave', onMouseLeave)
    item.addEventListener('blur', onMouseLeave)
  })
</script>

<style is:global>
  .home-item {
    display: block;
    position: relative;
    padding: 48px;
    font-size: 24px;
    background: var(--background);
    outline: none;
    pointer-events: auto;
    width: 100%;
    overflow: hidden;
  }

  .home-item:hover,
  .home-item:focus {
    z-index: 1;
  }

  .home-item:before {
    content: '';
    position: absolute;
    top: 0;
    right: -1px;
    bottom: 0;
    left: -1px;
    box-shadow: inset 0 0 0 1px var(--foreground);
    opacity: 0.1;
  }
  
  .home-item:hover:before,
  .home-item:focus:before {
    opacity: 0.25;
  }

  .home-item + .home-item {
    margin-top: -1px;
  }

  .home-item-images {
    opacity: 0;
  }

  .home-item:hover .home-item-images,
  .home-item:focus .home-item-images {
    opacity: 1;
  }

  .home-item-images .image-wrapper {
    position: absolute;
    top: 1px;
    left: 0;
    right: 0;
    bottom: 1px;
    opacity: 0;
  }

  .home-item-images .image-wrapper .image-wrapper-inner,
  .home-item-images .image-wrapper .image-blurhash,
  .home-item-images .image-wrapper .image-main {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .home-item-images .image-wrapper[data-active] {
    opacity: 1;
  }

  .home-item-title {
    position: relative;
    mix-blend-mode: difference;
  }

  @media (min-width: 720px) {
    .home-item {
      flex-basis: calc(50vw + 0.5px);
      flex-grow: 1;
      flex-shrink: 0;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      margin-top: 64px;
      min-height: calc(100vh - 64px);
    }

    .home-item:before {
      top: 0;
      right: 0;
      bottom: -1px;
      left: 0;
      opacity: 0.1;
    }

    .home-item:last-of-type {
      margin-right: 1px;
    }

    .home-item:hover:before,
    .home-item:focus:before {
      opacity: 0.25;
    }

    .home-item + .home-item {
      margin-top: 64px;
      margin-left: -1px;
    }

    .home-item-images .image-wrapper {
      bottom: 0;
    }
  }
  @media (min-width: 1280px) {
    .home-item {
      flex-basis: calc(33.33vw + 0.5px);
    }
  }
</style>